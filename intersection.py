import pandas as pd
import matplotlib.pyplot as plt


def find_slope_and_intercept(x1, y1, x2, y2):
    # Calculate the slope (m) and y-intercept (b) for the line
    m = (y2 - y1) / (x2 - x1)
    b = y1 - m * x1
    return m, b

def lines_intersect(line1, line2):
    # Extract coordinates from the lines
    x1, y1, x2, y2 = line1
    x3, y3, x4, y4 = line2

    # Find slopes and intercepts for the two lines
    m1, b1 = find_slope_and_intercept(x1, y1, x2, y2)
    m2, b2 = find_slope_and_intercept(x3, y3, x4, y4)

    # Check if the lines are parallel (same slope)
    if m1 == m2:
        return None  # Lines are parallel and do not intersect

    # Calculate the intersection point
    intersection_x = (b2 - b1) / (m1 - m2)
    intersection_y = m1 * intersection_x + b1

    # Check if the intersection point is within the line segments
    if (min(x1, x2) <= intersection_x <= max(x1, x2) and
            min(y1, y2) <= intersection_y <= max(y1, y2) and
            min(x3, x4) <= intersection_x <= max(x3, x4) and
            min(y3, y4) <= intersection_y <= max(y3, y4)):
        return intersection_x, intersection_y  # Lines intersect

    return None  # Lines do not intersect within the line segments

def intersect(rs, data_pushover):
    for i in range(len(rs)-1):
        for j in range(len(data_pushover)-1):

            line1 = [rs.Sd[i], rs.Sa[i], rs.Sd[i+1], rs.Sa[i+1]]
            line2 = [data_pushover.Sd[j], data_pushover.Sa[j], data_pushover.Sd[j+1], data_pushover.Sa[j+1]]
            
            intersection_point = lines_intersect(line1, line2)
            
            if intersection_point:
                return intersection_point

        else:
            continue  # Continue to the next iteration of the outer loop if no intersection is found